/*
 * Copyright 2005-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openwms.common.transport;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import org.openwms.common.location.LocationPK;
import org.openwms.common.transport.barcode.Barcode;

import java.util.List;

/**
 * A TransportService offers functionality to create, read, update and delete
 * {@link TransportUnit}s. Additionally it defines useful methods regarding the general
 * handling with {@link TransportUnit}s.
 *
 * @author Heiko Scherrer
 */
public interface TransportUnitService {

    /**
     * Create a new {@link TransportUnit} with the type {@link TransportUnitType} placed on an initial {@code Location}. The new
     * {@link TransportUnit} has the given {@link Barcode} as identifier.
     *
     * @param transportUnitBK The business identifier of the TransportUnit
     * @param transportUnitType The type of the TransportUnit
     * @param actualLocation The Location where the TransportUnit is placed on
     * @param strict Whether the implementation shall throw an exception when a TransportUnit already exists ({@literal true}) or not
     * ({@literal false}
     * @return The newly created instance
     */
    @NotNull TransportUnit create(
            @NotBlank String transportUnitBK,
            @NotNull TransportUnitType transportUnitType,
            @NotNull LocationPK actualLocation,
            Boolean strict
    );

    /**
     * Create a new {@link TransportUnit} with the {@link TransportUnitType} placed on the given {@code actualLocation}. The new
     * {@link TransportUnit} has the given {@link Barcode} as identifier.
     *
     * @param transportUnitBK The business identifier of the TransportUnit, must not be {@literal null}
     * @param transportUnitType The type of the TransportUnit, must not be {@literal null}
     * @param actualLocation The Location where the TransportUnit is placed on, must not be {@literal null}
     * @param strict Whether the implementation shall throw an exception when a TransportUnit already exists ({@literal true}) or not
     * ({@literal false}
     * @return The newly created instance
     * @throws org.ameba.exception.ServiceLayerException when invalid parameters
     */
    @NotNull TransportUnit create(
            @NotBlank String transportUnitBK,
            @NotBlank String transportUnitType,
            @NotBlank String actualLocation,
            Boolean strict
    );

    /**
     * Create a new {@link TransportUnit} with the {@link TransportUnitType} placed on the given {@code actualLocation}. The new
     * {@link TransportUnit} has a {@link Barcode} generated by the system.
     *
     * @param transportUnitType The type of the TransportUnit, must not be {@literal null}
     * @param actualLocation The Location where the TransportUnit is placed on, must not be {@literal null}
     * @return The newly created instance
     * @throws org.ameba.exception.ServiceLayerException when invalid parameters
     */
    @NotNull TransportUnit createNew(
            @NotBlank String transportUnitType,
            @NotBlank String actualLocation
    );

    /**
     * Take the TransportUnit {@code tu} and try to update it as-is in the persistent storage.
     * <p>
     * The implementation does not require any further checks. Assume that it tries to detach the entity class with the persistence context
     * and save the given state.
     *
     * @param barcode The business identifier of the TransportUnit
     * @param tu The TransportUnit instance to save
     * @return The updated instance
     */
    @NotNull TransportUnit update(@NotNull Barcode barcode, @Valid @NotNull TransportUnit tu);

    /**
     * Move a {@link TransportUnit} identified by its {@link Barcode} to the {@code Location} identified by the given
     * {@code targetLocationPK}.
     *
     * @param barcode The business identifier of the TransportUnit
     * @param targetLocation Unique identifier of the target Location, either the LocationID, ERPCode or PLCCode
     * @return The moved instance
     */
    @NotNull TransportUnit moveTransportUnit(@NotNull Barcode barcode, @NotBlank String targetLocation);

    /**
     * Change the target of the {@link TransportUnit} identified with its {@code barcode} to the Location identified by the
     * {@code targetLocationId}.
     *
     * @param barcode The business identifier of the TransportUnit
     * @param targetLocationId The LocationPK or {@literal null} to reset the current
     * target
     */
    @NotNull TransportUnit changeTarget(@NotNull Barcode barcode, @NotBlank String targetLocationId);

    /**
     * Delete already persisted {@link TransportUnit}s from the persistent storage. It is not allowed in every case to delete a
     * {@link TransportUnit}, potentially an active {@code TransportOrder} could exist or Inventory is still linked with one of the
     * {@code transportUnit}s.
     *
     * @param transportUnits A collection of {@link TransportUnit}s to delete
     */
    void deleteTransportUnits(@NotNull List<TransportUnit> transportUnits);

    /**
     * Find and return a {@link TransportUnit} by it's {@code transportUnitBK}.
     *
     * @param transportUnitBK The business identifier of the TransportUnit
     * @return The TransportUnit
     * @throws org.ameba.exception.NotFoundException may throw if not found
     */
    @NotNull TransportUnit findByBarcode(@NotBlank String transportUnitBK);

    /**
     * Find and return all {@link TransportUnit}s identified by their particular {@link Barcode}.
     *
     * @param barcodes A list of business identifiers of the TransportUnits
     * @return A List of TransportUnits or an empty List, never {@literal null}
     */
    @NotNull List<TransportUnit> findByBarcodes(@NotEmpty List<Barcode> barcodes);

    /**
     * Find and return all {@link TransportUnit}s that are located on the {@code Location} identified by the given {@code actualLocation}.
     *
     * @param actualLocation The Location where the TransportUnits are placed on
     * @return All TransportUnits or an empty List, never {@literal null}
     */
    @NotNull List<TransportUnit> findOnLocation(@NotBlank String actualLocation);

    /**
     * Find and return a {@link TransportUnit} identified by the given {@code pKey}.
     *
     * @param pKey The persistent key
     * @return The instance, never {@literal null}
     * @throws org.ameba.exception.NotFoundException may throw if not found
     */
    @NotNull TransportUnit findByPKey(@NotBlank String pKey);

    /**
     * Add an error to a {@link TransportUnit}.
     *
     * @param transportUnitBK The business identifier of the TransportUnit
     * @param errorCode The errorCode bitmap
     */
    void addError(@NotBlank String transportUnitBK, @NotNull UnitError errorCode);

    /**
     * Find and return all existing {@link TransportUnit}s.
     *
     * @return a List of all existing or an empty List but never {@literal null}
     */
    @NotNull List<TransportUnit> findAll();

    /**
     * Change the state of a {@link TransportUnit}.
     *
     * @param transportUnitBK The business identifier of the TransportUnit
     * @param state The desired state
     * @throws org.openwms.common.StateChangeException if change is not allowed
     */
    void setState(@NotBlank String transportUnitBK, @NotBlank String state);

    /**
     * Trigger a synchronization of TransportUnits.
     */
    void synchronizeTransportUnits();
}
